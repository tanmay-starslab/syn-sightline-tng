{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation Guide for URSSI Summer School","text":"<p>This documentation is built using MkDocs and is hosted on GitHub Pages.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#external-resources","title":"External Resources","text":"<ol> <li>Scientific Python documentation guide - Focused on creating docs using Sphinx with Myst (markdown)</li> <li>PyOpenSci documentation guide - Worth reading for a different perspective on writing documentation, with more focus on the why and how. Uses Sphinx, but this is not the core part of the documentaiton.</li> </ol>"},{"location":"contributing/","title":"Contributing","text":"<p>Thanks for helping improve syn-sightline-tng! Start here:</p> <ul> <li>Read the repository guidelines in AGENTS.md for project structure, style, and PR process:   https://github.com/tanmay-starslab/syn-sightline-tng/blob/main/AGENTS.md</li> <li>Local docs: <code>mkdocs serve</code>; strict build: <code>mkdocs build --strict</code>.</li> <li>Tests: <code>pytest -q</code>; put tests in <code>tests/test_*.py</code>.</li> </ul> <p>Quickstart example</p> <pre><code>import syn_sightline_tng as sst\nsl = sst.trace_ray(origin=(0,0,0), direction=(1,0,0), length=10.0, n_samples=128)\nspec = sst.synthesize_spectrum(sl, lines=[\"HI 1216\"])  # placeholder API\n</code></pre> <p>Planned architecture (high level) - I/O: thin wrappers for AREPO/TNG snapshots (h5py-based). - Ray tracing: fast sightline sampling/intersection (vectorized, chunked I/O). - Spectra: line lists, Voigt profiles, instrumental LSF. - CLI: reproducible runs and benchmarks.</p> <p>Open a draft PR early to discuss scope and interfaces.</p>"}]}